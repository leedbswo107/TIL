/**
 * 문제
 * 숫자 9개가 오름차순이나 내림차순으로 정렬되어 있을 때, 중앙값은 다섯 번째 숫자이다. 예를 들어, 1, 3, 4, 1, 2, 6, 8, 4, 10의 중앙값은 4이다. (1 ≤ 1 ≤ 2 ≤ 3 ≤ 4 ≤ 4 ≤ 6 ≤ 8 ≤ 10)
 * 이미지 I는 크기가 R × C인 2차원 픽셀이다. (3 ≤ R ≤ 40, 3 ≤ C ≤ 40) 각 픽셀은 어두운 정도 V를 나타낸다. (0 ≤ V ≤ 255)
 * 중앙 필터는 이미지에 있는 노이즈를 제거하는 필터이다. 필터의 크기는 3 × 3이고, 이미지의 중앙값을 찾으면서 잡음을 제거한다.
 * 예를 들어, 아래와 같은 6 × 5 이미지가 있다.
 * 필터링된 이미지의 크기는 4 × 3이고, 아래와 같다.
 * 가장 왼쪽 윗 행에 필터를 두고, 오른쪽으로 움직이면서 중앙값을 찾는다. 한 행을 모두 이동했으면, 다음 행으로 이동해 다시 중앙값을 찾는다. 아래와 같은 순서를 가진다.
 * 위의 그림에서 각각의 중앙값은 36, 36, 21이 된다. 이 값은 필터링된 이미지 J의 첫 행과 같다. 
 * 이미지 I가 주어졌을 때, 필터링 된 이미지 J를 구하고, 값이 T보다 크거나 같은 픽셀의 수를 구하는 프로그램을 작성하시오.
 * 예를 들어, T = 40일 때, 위의 예에서 정답은 7이다. 
 * 
 * 출력
 * 첫째 줄에 필터링 된 이미지 J의 각 픽셀 값 중에서 T보다 크거나 같은 것의 개수를 출력한다.
 */
const input = require('fs').readFileSync('./input.txt', 'utf-8').trim().split('\n');
const [R, C] = input[0].split(' ').map(Number);
const arr = input.slice(1, -1).map(e => e.split(' ').map(Number));
const filtered = [];
const T = +input.pop();
for (let i = 1; i < R - 1; i++) {
  for (let j = 1; j < C - 1; j++) {
    const nine = [
      arr[i - 1][j - 1], arr[i - 1][j], arr[i - 1][j + 1],
      arr[i][j - 1], arr[i][j], arr[i][j + 1],
      arr[i + 1][j - 1], arr[i + 1][j], arr[i + 1][j + 1]
    ]
    filtered.push(nine.sort((a, b) => a - b)[4]);
  }
}
console.log(filtered.filter(e => e >= T).length);